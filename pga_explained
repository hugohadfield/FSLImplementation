{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/work/anaconda/lib/python3.7/site-packages/numba/compiler.py:602: NumbaPerformanceWarning: \u001b[1m\n",
      "The keyword argument 'parallel=True' was specified but no transformation for parallel execution was possible.\n",
      "\n",
      "To find out why, try turning on parallel diagnostics, see http://numba.pydata.org/numba-doc/latest/user/parallel.html#diagnostics for help.\n",
      "\u001b[1m\n",
      "File \"../anaconda/lib/python3.7/site-packages/clifford/__init__.py\", line 83:\u001b[0m\n",
      "\u001b[1m    @numba.njit(parallel=NUMBA_PARALLEL)\n",
      "\u001b[1m    def play_games():\n",
      "\u001b[0m    \u001b[1m^\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "  self.func_ir.loc))\n"
     ]
    }
   ],
   "source": [
    "from clifford.g4 import *\n",
    "import numpy as np\n",
    "from clifford import MultiVector\n",
    "import numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "1.0\n",
      "1.0\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# Using a normal 4d curved space\n",
    "print(e1*e1)\n",
    "print(e2*e2)\n",
    "print(e3*e3)\n",
    "print(e4*e4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DualMV:\n",
    "    def __init__(self, internal_array=None):\n",
    "        if internal_array is None:\n",
    "            self.internal_array = [0*e1]\n",
    "        else:\n",
    "            self.internal_array = [+i for i in internal_array]\n",
    "            \n",
    "    def __add__(self, other):\n",
    "        if issubclass(other.__class__, numbers.Number):\n",
    "            new_internal_array = [+i for i in self.internal_array]\n",
    "            new_internal_array[0] += other\n",
    "            return DualMV(new_internal_array)\n",
    "        if issubclass(other.__class__, MultiVector):\n",
    "            new_internal_array = [+i for i in self.internal_array]\n",
    "            new_internal_array[0] += other\n",
    "            return DualMV(new_internal_array)\n",
    "        elif issubclass(other.__class__, DualMV):\n",
    "            new_internal_array = [0]*max([len(self.internal_array), len(other.internal_array)])\n",
    "            for i in range(len(self.internal_array)):\n",
    "                new_internal_array[i] += self.internal_array[i]\n",
    "            for j in range(len(other.internal_array)):\n",
    "                new_internal_array[j] += other.internal_array[j]\n",
    "            return DualMV(new_internal_array)\n",
    "    \n",
    "    def __rmul__(self, other):\n",
    "        if issubclass(other.__class__, numbers.Number):\n",
    "            new_int_array = [other*i for i in self.internal_array]\n",
    "            return DualMV(new_int_array)\n",
    "    \n",
    "    def __mul__(self, other):\n",
    "        if issubclass(other.__class__, numbers.Number):\n",
    "            new_int_array = [other*i for i in self.internal_array]\n",
    "            return DualMV(new_int_array)\n",
    "        if issubclass(other.__class__, MultiVector):\n",
    "            new_int_array = [0]*len(self.internal_array)\n",
    "            for i in range(len(self.internal_array)):\n",
    "                new_int_array[i] = self.internal_array[i]*other\n",
    "            return DualMV(new_int_array)\n",
    "        elif issubclass(other.__class__, DualMV):\n",
    "            output = DualMV()\n",
    "            for i in range(len(other.internal_array)):\n",
    "                output += DualMV([0*e1]*i + (self*other.internal_array[i]).internal_array)\n",
    "            return output\n",
    "        \n",
    "    def __xor__(self, other):\n",
    "        if issubclass(other.__class__, MultiVector):\n",
    "            new_int_array = [0]*len(self.internal_array)\n",
    "            for i in range(len(self.internal_array)):\n",
    "                new_int_array[i] = self.internal_array[i]^other\n",
    "            return DualMV(new_int_array)\n",
    "        elif issubclass(other.__class__, DualMV):\n",
    "            output = DualMV()\n",
    "            for i in range(len(other.internal_array)):\n",
    "                output += DualMV([0*e1]*i + (self^other.internal_array[i]).internal_array)\n",
    "            return output\n",
    "        \n",
    "    def __pow__(self, other):\n",
    "        new = DualMV([1])\n",
    "        for i in range(other):\n",
    "            new = new*self\n",
    "        return new\n",
    "    \n",
    "    def __str__(self):\n",
    "        total_string = ''\n",
    "        for i in range(len(self.internal_array)):\n",
    "            if i > 0:\n",
    "                total_string +='d' + str(i) + '*[' + str(self.internal_array[i]) + ']'\n",
    "            else:\n",
    "                total_string += str(self.internal_array[i])\n",
    "            if i < len(self.internal_array) -1:\n",
    "                total_string+= ' + '\n",
    "        return total_string\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return str(self)\n",
    "    \n",
    "    @property\n",
    "    def minterm(self):\n",
    "        for i in range(len(self.internal_array)):\n",
    "            if self.internal_array[i] != 0*e1:\n",
    "                return i\n",
    "    \n",
    "    def trim(self, order=1):\n",
    "        \"\"\"\n",
    "        Removes anything above the order specified\n",
    "        \"\"\"\n",
    "        return DualMV([i for i in self.internal_array[0:order+1]])\n",
    "            \n",
    "    def homo(self):\n",
    "        minterm = self.minterm\n",
    "        coef = (self.internal_array[minterm]|e4)[0]\n",
    "        new_dnum = DualMV([i/coef for i in self.internal_array[minterm:]])\n",
    "        return new_dnum\n",
    "    \n",
    "    def __invert__(self):\n",
    "        return DualMV([~i for i in self.internal_array])\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0 + d1*[1.0]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create the dual unit\n",
    "d1 = DualMV([0*e1, 0*e1 + 1.0])\n",
    "d1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is the pseudo scalar (for the duals)\n",
    "I4 = e1234"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some utility functions\n",
    "def up(x):\n",
    "    return 2*d1*x + e4\n",
    "\n",
    "def down(x):\n",
    "    return 0.5*(x.homo().internal_array[1])\n",
    "\n",
    "def meet(X, Y):\n",
    "    return ((X*I4)^(Y*I4))*I4\n",
    "\n",
    "def random_euc_point():\n",
    "    return random.randn()*e1 + random.randn()*e2 + random.randn()*e3\n",
    "\n",
    "def random_point():\n",
    "    return up(random_euc_point())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lets have a go with intersecting a plane and a line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1.0^e4) + d1*[(2.0^e1)]\n",
      "(1.0^e4) + d1*[(2.0^e2)]\n",
      "(1.0^e4) + d1*[(2.0^e1) + (2.0^e2) + (2.0^e3)]\n"
     ]
    }
   ],
   "source": [
    "# Create some points\n",
    "A = up(1.0*e1)\n",
    "B = up(1.0*e2)\n",
    "C = up(1.0*e1 + 1.0*e2 + 1.0*e3)\n",
    "print(A)\n",
    "print(B)\n",
    "print(C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 + d1*[-(2.0^e24) - (2.0^e34)] + d2*[(4.0^e12) + (4.0^e13)]\n",
      "0 + d1*[0] + d2*[-(4.0^e124) + (4.0^e234)] + d3*[0]\n"
     ]
    }
   ],
   "source": [
    "# Wedge the points to give a line and a plane\n",
    "L1 = A^C\n",
    "P2 = B^C^up(0*e1)\n",
    "print(L1)\n",
    "print(P2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0 + d1*[0] + d2*[0] + d3*[(8.0^e4)] + d4*[(16.0^e1) + (16.0^e2) + (16.0^e3)] + d5*[0]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform the meet as usual with the dual and wedge\n",
    "meet(L1,P2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the minimum order term of d\n",
    "meet(L1,P2).minterm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0^e4) + d1*[(2.0^e1) + (2.0^e2) + (2.0^e3)] + d2*[0]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Homogenise to get the point at the intersection\n",
    "meet(L1,P2).homo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0^e1) + (1.0^e2) + (1.0^e3)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Call down to convert back to a normal euc point\n",
    "down(meet(L1,P2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Translators seem to work as well"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def translation_rotor(t):\n",
    "    return (d1*t)*e4 + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0 + d1*[(10.0^e14) + (5.0^e34)]\n",
      "1.0 + d1*[0] + d2*[125.0]\n"
     ]
    }
   ],
   "source": [
    "R = translation_rotor(10*e1+5*e3)\n",
    "print(R)\n",
    "print(R*~R)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0^e4) + d1*[(22.0^e1) + (2.0^e2) + (12.0^e3)] + d2*[-(185.0^e4)] + d3*[-(350.0^e1) + (250.0^e2) - (50.0^e3)]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "R*C*~R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1.0^e1) + (1.0^e2) + (1.0^e3)\n",
      "(11.0^e1) + (1.0^e2) + (6.0^e3)\n"
     ]
    }
   ],
   "source": [
    "print(down(C))\n",
    "print(down((R*C*~R).trim()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rotation rotors are the same as in 3D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rotation_rotor(m,n,theta):\n",
    "    B = (m*n).normal()\n",
    "    rotor = np.cos(theta / 2) - B * np.sin(theta / 2)\n",
    "    return DualMV([rotor])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'rotation_rotor' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-49073b5a6207>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mR\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrotation_rotor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0me2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpi\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mR\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mR\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mR\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'rotation_rotor' is not defined"
     ]
    }
   ],
   "source": [
    "R = rotation_rotor(e1,e2,np.pi/4)\n",
    "print(R)\n",
    "print(R*~R)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0^e4) + d1*[(1.41421^e1) + (1.41421^e2)]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "R*(up(e1)*~R)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.70711^e1) + (0.70711^e2)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "down(R*(up(e1)*~R)) # This is wrong.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0^e4) + d1*[(1.41421^e1) + (1.41421^e2)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(R*up(e1))*~R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.70711^e1) + (0.70711^e2)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "R*e1*~R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.92388 - (0.38268^e12)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "R"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.41421^e2) + (1.0^e3)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "down((R*C*~R))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.41421^e2) + (1.0^e3)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "down((R*(C*I4)*~R)*I4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
